import React, { FunctionComponent, ReactNode } from 'react';
import { StyleProp, TextInputProps, TextProps, ViewProps, ViewStyle } from 'react-native';
type FormInputProps = {
    mainContainerStyle?: StyleProp<ViewStyle>;
    inputContainerStyle?: object;
    inputContainerBackgroundColor?: string;
    placeholderText?: string;
    placeholderTextColor?: string;
    inputStyle?: object;
    inputTextColor?: string;
    hideLabel?: boolean;
    labelText?: string;
    labelTextStyle?: object;
    labelTextContainerStyle?: object;
    isRequired?: boolean;
    requiredText?: string;
    requiredTextStyle?: object;
    requiredTextColor?: string;
    labelTextColor?: string;
    textInputProps?: TextInputProps;
    labelTextProps?: TextProps;
    requiredTextProps?: TextProps;
    mainContainerViewProps?: ViewProps;
    inputContainerViewProps?: ViewProps;
    labelTextContainerViewProps?: ViewProps;
    characterLimit?: number;
    showCharacterLimit?: boolean;
    inputType?: 'default' | 'number-pad' | 'decimal-pad' | 'numeric' | 'email-address' | 'phone-pad' | 'visible-password' | 'ascii-capable' | 'numbers-and-punctuation' | 'url' | 'name-phone-pad' | 'twitter' | 'web-search' | undefined;
    autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters' | undefined;
    onTextChange?: (text: string) => void;
    value?: string;
    error?: boolean;
    errorText?: string;
    errorTextStyle?: object;
    leftIcon?: string;
    leftIconColor?: string;
    leftIconStyle?: object;
    leftIconContainerStyle?: object;
    renderLeftIcon?: FunctionComponent<{
        children?: ReactNode;
        style?: StyleProp<ViewStyle>;
    }>;
    leftIconOnPress?: () => void;
    rightIcon?: string;
    rightIconColor?: string;
    rightIconStyle?: object;
    rightIconContainerStyle?: object;
    renderRightIcon?: FunctionComponent<{
        children?: ReactNode;
        style?: StyleProp<ViewStyle>;
    }>;
    rightIconOnPress?: () => void;
    hiddenText?: boolean;
    disabled?: boolean;
    datePicker?: boolean;
    datePickerWithTime?: boolean;
    disableFutureDates?: boolean;
    disablePastDates?: boolean;
    initialDate?: Date;
    initialRange?: {
        startDate: Date | undefined;
        endDate: Date | undefined;
    };
    initialDates?: Date[] | undefined;
    onDateChange?: (date: Date) => void;
    sendDateValue?: (dateValue: string) => void;
    onDateRangeChange?: (range: {
        startDate: Date | undefined;
        endDate: Date | undefined;
    }) => void;
    sendDateRangeValues?: (startDateValue: string, endDateValue: string) => void;
    onDatesChange?: (dates: Date[] | undefined) => void;
    sendDatesValues?: (datesValues: string[]) => void;
    datePickerBackgroundColor?: string;
    showDatePickerCloseButton?: boolean;
    datePickerCloseButtonColor?: string;
    datePickerMode?: 'single' | 'range' | 'multiple';
    selectedItemColor?: string;
    selectedTextStyle?: object;
    firstDayOfWeek?: number;
    headerTextContainerStyle?: object;
    datePlaceholder?: string;
    datePickerAnimationType?: 'zoomIn' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight' | 'none';
    animationDuration?: number;
    hideDatePickerConfirmButton?: boolean;
    dateFormat?: string;
    dateTimeFormat?: string;
};
declare const FormInput: React.FC<FormInputProps>;
export default FormInput;
//# sourceMappingURL=formInput.d.ts.map